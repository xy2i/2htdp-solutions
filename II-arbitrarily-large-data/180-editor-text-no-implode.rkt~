;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname 180-editor-text-no-implode) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
(define HEIGHT 36) ; the height of the editor 
(define WIDTH 200) ; its width 
(define FONT-SIZE 16) ; the font size 
(define FONT-COLOR "black") ; the font color 
 
(define MT (empty-scene WIDTH HEIGHT))
(define CURSOR (rectangle 1 HEIGHT "solid" "red"))

(define-struct editor [pre post])
; An Editor is a structure:
;   (make-editor Lo1S Lo1S) 
; An Lo1S is one of: 
; – '()
; – (cons 1String Lo1S)

(define good
  (cons "g" (cons "o" (cons "o" (cons "d" '())))))
(define all
  (cons "a" (cons "l" (cons "l" '()))))
(define lla
  (cons "l" (cons "l" (cons "a" '()))))
 
(check-expect (create-editor "lla" "good")
              (make-editor all good))
(check-expect (create-editor "all" "good")
              (make-editor lla good))

(define (create-editor pre post)
  (make-editor (reverse (explode pre))
               (explode post)))
 
; Editor KeyEvent -> Editor
; deals with a key event, given some editor
(check-expect
 (editor-kh (create-editor "" "") "e")
 (create-editor "e" ""))
(check-expect
 (editor-kh (create-editor "cd" "fgh") "e")
 (create-editor "cde" "fgh"))
(check-expect
 (editor-kh (create-editor "abc" "") "e")
 (create-editor "abce" ""))
(check-expect
 (editor-kh (create-editor "" "fg") "e")
 (create-editor "e" "fg"))
(check-expect
 (editor-kh (create-editor "a" "") "\b")
 (create-editor "" ""))
(check-expect
 (editor-kh (create-editor "a" "bcd") "\b")
 (create-editor "" "bcd"))
(check-expect
 (editor-kh (create-editor "abc" "def") "\b")
 (create-editor "ab" "def"))
(check-expect
 (editor-kh (create-editor "abc" "") "\b")
 (create-editor "ab" ""))
(check-expect
 (editor-kh (create-editor "abc" "") "right")
 (create-editor "abc" ""))
(check-expect
 (editor-kh (create-editor "abc" "def") "right")
 (create-editor "abcd" "ef"))
(check-expect
 (editor-kh (create-editor "" "def") "right")
 (create-editor "d" "ef"))
(check-expect
 (editor-kh (create-editor "" "") "right")
 (create-editor "" ""))
(check-expect
 (editor-kh (create-editor "abc" "") "left")
 (create-editor "ab" "c"))
(check-expect
 (editor-kh (create-editor "abc" "def") "left")
 (create-editor "ab" "cdef"))
(check-expect
 (editor-kh (create-editor "" "def") "left")
 (create-editor "" "def"))
(check-expect
 (editor-kh (create-editor "" "") "left")
 (create-editor "" ""))

(define (editor-kh ed k)
  (cond
    [(key=? k "left") (editor-lft ed)]
    [(key=? k "right") (editor-rgt ed)]
    [(key=? k "\b") (editor-del ed)]
    [(key=? k "\t") ed]
    [(key=? k "\r") ed]
    [(= (string-length k) 1) (editor-ins ed k)]
    [else ed]))

; moves the cursor to the left
(define (editor-lft ed)
  (cond
    [(empty? (editor-pre ed)) ed] ; nothing to consume
    [else
     (make-editor (rest (editor-pre ed))
                  (cons (first (editor-pre ed)) (editor-post ed)))]))

; moves the cursor to the right
(define (editor-rgt ed)
  (cond
    [(empty? (editor-post ed)) ed] ; nothing to consume
    [else
     (make-editor (cons (first (editor-post ed)) (editor-pre ed))
                  (rest (editor-post ed)))]))

; deletes the 1String at the end of pre (between pre and post)
(define (editor-del ed)
  (cond
    [(empty? (editor-pre ed)) ed]
    [else
     (make-editor (rest (editor-pre ed)) ; delete one character
                  (editor-post ed))]))

; insert the 1String k between pre and post
(check-expect
 (editor-ins (make-editor '() '()) "e")
 (make-editor (cons "e" '()) '()))
 
(check-expect
 (editor-ins
  (make-editor (cons "d" '())
               (cons "f" (cons "g" '())))
  "e")
 (make-editor (cons "e" (cons "d" '()))
              (cons "f" (cons "g" '()))))
(define (editor-ins ed k)
  (make-editor (cons k (editor-pre ed))
               (editor-post ed)))
    
; Editor -> Image
; renders an editor as an image of the two texts 
; separated by the cursor 
(define (editor-render e)
  (place-image/align
   (beside (editor-text (editor-pre e))
           CURSOR
           (editor-text (editor-post e)))
   1 1
   "left" "top"
   MT))

;; Ex. 180: Design editor-text without using implode.
;; Two implementations.

; List-of-1Strings -> Image
; renders the individual text
(define (editor-text.v1 l1s)
  (cond
    [(empty? l1s) (empty-scene 0 0)]
    [else (beside (first l1s)
                  (editor-text (rest l1s)))]))

(define (editor-text l1s) 

(define walk-list l1s